# backend.py
import pandas as pd
import numpy as np
from flask import Flask, request, jsonify
from sklearn.linear_model import LinearRegression
import plotly.graph_objects as go
import json

app = Flask(__name__)

def make_regression_plot(df, x_col, y_col, degree=1):
    df = df[[x_col, y_col]].dropna()
    X = df[[x_col]].values
    y = df[y_col].values

    # Polynomial regression
    X_poly = np.vander(X.flatten(), N=degree+1, increasing=True)
    model = LinearRegression().fit(X_poly, y)
    y_pred = model.predict(X_poly)

    # Build Plotly figure
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=X.flatten(), y=y, mode="markers", name="Data"))
    fig.add_trace(go.Scatter(x=X.flatten(), y=y_pred, mode="lines", name=f"Degree {degree} fit", line=dict(color="red")))
    fig.update_layout(title=f"Regression of {y_col} vs {x_col}",
                      xaxis_title=x_col,
                      yaxis_title=y_col,
                      template="plotly_white")

    # Convert figure to JSON (so frontend can render it)
    return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder), model.coef_.tolist(), model.intercept_

@app.route("/regression", methods=["POST"])
def regression():
    # Expect a CSV file + parameters from frontend
    file = request.files["file"]
    x_col = request.form.get("x_col")
    y_col = request.form.get("y_col")
    degree = int(request.form.get("degree", 1))

    # Load into pandas
    if file.filename.endswith(".csv"):
        df = pd.read_csv(file)
    else:
        df = pd.read_excel(file)

    fig_json, coeffs, intercept = make_regression_plot(df, x_col, y_col, degree)

    return jsonify({
        "figure": json.loads(fig_json),
        "coefficients": coeffs,
        "intercept": intercept
    })

if __name__ == "__main__":
    app.run(debug=True)
