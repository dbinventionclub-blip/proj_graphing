import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

def regression_demo(file_path, x_col, y_col, degree=1):
    """
    file_path: path to CSV or Excel file
    x_col: name of column to use as X
    y_col: name of column to use as Y
    degree: polynomial degree (1 = linear, 2 = quadratic, etc.)
    """
    # Read spreadsheet (CSV or Excel)
    if file_path.endswith(".csv"):
        df = pd.read_csv(file_path)
    else:
        df = pd.read_excel(file_path)

    # Drop rows with missing data in chosen columns
    df = df[[x_col, y_col]].dropna()

    # Prepare data
    X = df[[x_col]].values
    y = df[y_col].values

    # Polynomial features
    X_poly = np.vander(X.flatten(), N=degree+1, increasing=True)

    # Fit regression
    model = LinearRegression().fit(X_poly, y)
    y_pred = model.predict(X_poly)

    # Plot
    plt.figure(figsize=(7,5))
    plt.scatter(X, y, color="blue", label="Data")
    plt.plot(X, y_pred, color="red", linewidth=2, label=f"Degree {degree} fit")
    plt.xlabel(x_col)
    plt.ylabel(y_col)
    plt.title(f"Regression of {y_col} vs {x_col}")
    plt.legend()
    plt.grid(True)
    plt.show()

    # Print model details
    print("Coefficients:", model.coef_)
    print("Intercept:", model.intercept_)


# ---------------------------
# DEMO USAGE (with fake data)
# ---------------------------
if __name__ == "__main__":
    # Create a demo dataset and save to CSV
    demo_data = pd.DataFrame({
        "time": np.arange(1, 11),
        "score": [2.1, 3.9, 6.2, 7.8, 10.5, 12.2, 14.1, 16.5, 18.7, 20.1]
    })
    demo_data.to_csv("demo.csv", index=False)

    # Run regression demo
    regression_demo("demo.csv", "time", "score", degree=1)
